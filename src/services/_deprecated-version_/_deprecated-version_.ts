// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  LocatorRequestWrapper,
  LocatorResponseWrapper,
  locatorRequestWrapperRequest,
  locatorResponseWrapperResponse,
} from '../common';
import { LocatorParams } from './request-params';

export class _DeprecatedVersion_Service extends BaseService {
  /**
 * The Locator API allows you to find UPS locations - such as drop-off points, retail locations, and UPS access points (third-party retail locations that offer UPS package drop-off, or delivery services). The API provides capabilities to search by location, services offered, program types, and related criteria. You can also retrieve hours of operation, location details, and additional UPS services offered at specific locations.
 * @param {string} deprecatedVersion - Version of API

Valid values:
- v1

 * @param {string} reqOption - Indicates the type of request.
Valid values:
1-Locations (Drop Locations and Will call locations)
8-All available Additional Services
16-All available Program Types
24-All available Additional Services and Program types
32-All available Retail Locations
40-All available Retail Locations and Additional Services 
48-All available Retail Locations and Program Types 
56-All available Retail Locations, Additional Services and Program Types 
64-Search for UPS Access Point Locations.  
 * @param {string} [locale] - Locale of request
 * @param {string} [transId] - An identifier unique to the request. Length 32
 * @param {string} [transactionSrc] - An identifier of the client/source application that is making the request.Length 512
 * @returns {Promise<HttpResponse<LocatorResponseWrapper>>} successful operation
 */
  async locator(
    deprecatedVersion: string,
    reqOption: string,
    body: LocatorRequestWrapper,
    params?: LocatorParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<LocatorResponseWrapper>> {
    const path = this.client.buildPath('/locations/{deprecatedVersion}/search/availabilities/{reqOption}', {
      deprecatedVersion: deprecatedVersion,
      reqOption: reqOption,
    });
    const options: any = {
      responseSchema: locatorResponseWrapperResponse,
      requestSchema: locatorRequestWrapperRequest,
      body: body as any,
      queryParams: {},
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.transId) {
      options.headers['transId'] = params?.transId;
    }
    if (params?.transactionSrc) {
      options.headers['transactionSrc'] = params?.transactionSrc;
    }
    if (params?.locale) {
      options.queryParams['Locale'] = params?.locale;
    }
    return this.client.post(path, options);
  }
}
