// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  geocodeCandidateAddressKeyFormat,
  geocodeCandidateAddressKeyFormatRequest,
  geocodeCandidateAddressKeyFormatResponse,
} from './geocode-candidate-address-key-format';
import {
  geocodeCandidateGeocode,
  geocodeCandidateGeocodeRequest,
  geocodeCandidateGeocodeResponse,
} from './geocode-candidate-geocode';

/**
 * The shape of the model inside the application code - what the users use
 */
export const searchResultsGeocodeCandidate: any = z.lazy(() => {
  return z.object({
    addressKeyFormat: geocodeCandidateAddressKeyFormat,
    geocode: geocodeCandidateGeocode,
    landmarkName: z.string().min(1).max(50).optional(),
  });
});

/**
 *
 * @typedef  {SearchResultsGeocodeCandidate} searchResultsGeocodeCandidate
 * @property {GeocodeCandidateAddressKeyFormat} - Contains all of the basic information about candidate address.
 * @property {GeocodeCandidateGeocode} - Geocode is the latitude and longitude of the origin candidate.
 * @property {string} - If a Landmark code was provided in the request, a candidate list of Landmark Names will be returned along with the corresponding address and Geocode.
 */
export type SearchResultsGeocodeCandidate = z.infer<typeof searchResultsGeocodeCandidate>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const searchResultsGeocodeCandidateResponse: any = z.lazy(() => {
  return z
    .object({
      AddressKeyFormat: geocodeCandidateAddressKeyFormatResponse,
      Geocode: geocodeCandidateGeocodeResponse,
      LandmarkName: z.string().min(1).max(50).optional(),
    })
    .transform((data) => ({
      addressKeyFormat: data['AddressKeyFormat'],
      geocode: data['Geocode'],
      landmarkName: data['LandmarkName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const searchResultsGeocodeCandidateRequest: any = z.lazy(() => {
  return z
    .object({
      addressKeyFormat: geocodeCandidateAddressKeyFormatRequest.nullish(),
      geocode: geocodeCandidateGeocodeRequest.nullish(),
      landmarkName: z.string().nullish(),
    })
    .transform((data) => ({
      AddressKeyFormat: data['addressKeyFormat'],
      Geocode: data['geocode'],
      LandmarkName: data['landmarkName'],
    }));
});
