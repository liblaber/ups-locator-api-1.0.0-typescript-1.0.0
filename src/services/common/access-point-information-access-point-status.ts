// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const accessPointInformationAccessPointStatus: any = z.lazy(() => {
  return z.object({
    code: z.string().min(2).max(2),
    description: z.string().min(1).max(35),
  });
});

/**
 * Container for UPS AccessPoint status.
 * @typedef  {AccessPointInformationAccessPointStatus} accessPointInformationAccessPointStatus - Container for UPS AccessPoint status. - Container for UPS AccessPoint status.
 * @property {string} - Valid status values are: 
01-Active-available
06-Suspended
07-Active-unavailable
08-Terminated
 * @property {string} - Description of status code.
 */
export type AccessPointInformationAccessPointStatus = z.infer<typeof accessPointInformationAccessPointStatus>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const accessPointInformationAccessPointStatusResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string().min(2).max(2),
      Description: z.string().min(1).max(35),
    })
    .transform((data) => ({
      code: data['Code'],
      description: data['Description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const accessPointInformationAccessPointStatusRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish(), description: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
    Description: data['description'],
  }));
});
