// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequestUnitOfMeasurement: any = z.lazy(() => {
  return z.object({
    code: z.string(),
  });
});

/**
 * Distance unit of measurement. This is required for location requests (request option 1).
 * @typedef  {LocatorRequestUnitOfMeasurement} locatorRequestUnitOfMeasurement - Distance unit of measurement. This is required for location requests (request option 1). - Distance unit of measurement. This is required for location requests (request option 1).
 * @property {string} - Valid values are:

- MI-Miles
- KM-Kilometers

 */
export type LocatorRequestUnitOfMeasurement = z.infer<typeof locatorRequestUnitOfMeasurement>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestUnitOfMeasurementResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string(),
    })
    .transform((data) => ({
      code: data['Code'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestUnitOfMeasurementRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
  }));
});
