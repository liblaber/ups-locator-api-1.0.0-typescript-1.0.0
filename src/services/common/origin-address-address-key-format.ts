// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const originAddressAddressKeyFormat: any = z.lazy(() => {
  return z.object({
    consigneeName: z.string().min(1).max(40).optional(),
    addressLine: z.string().min(1).max(100),
    addressLine2: z.string().min(1).max(64).optional(),
    addressLine3: z.string().min(1).max(64).optional(),
    politicalDivision3: z.string().min(1).max(35).optional(),
    politicalDivision2: z.string().min(1).max(50),
    politicalDivision1: z.string().min(1).max(50),
    postcodePrimaryLow: z.string().min(1).max(10),
    postcodeExtendedLow: z.string().min(1).max(10).optional(),
    countryCode: z.string().min(1).max(2),
    singleLineAddress: z.string().optional(),
  });
});

/**
 * Contains all of the basic information about the origin such as: Address Lines, City, State/Province, Postal Code and Country or Territory Code. 
The element CountryCode is required.
 * @typedef  {OriginAddressAddressKeyFormat} originAddressAddressKeyFormat - Contains all of the basic information about the origin such as: Address Lines, City, State/Province, Postal Code and Country or Territory Code. 
The element CountryCode is required. - Contains all of the basic information about the origin such as: Address Lines, City, State/Province, Postal Code and Country or Territory Code. 
The element CountryCode is required.
 * @property {string} - Name. Not relevant for this tool
 * @property {string} - Address Line Information. The user may submit street level address information or provide Intersection information.
 * @property {string} - Additional Address Line Information.
 * @property {string} - Additional Address Line Information.
 * @property {string} - Barrio or other sub-division of City
 * @property {string} - City or Town.
 * @property {string} - State or province
 * @property {string} - Main postal code. Required if the user does not submit the City, State/Province address combination.
 * @property {string} - 4 Digit postal code extension. Valid for US only.
 * @property {string} - Two-character country or territory abbreviation
 * @property {string} - Single line search information. Can contain values of origin address in a single line. Will override other origin address information.

Conditionally Required for Non-Postal Code Countries. Applicable Country Ireland (IE)

SingleLineAddress used for the lookup

SingleLineAddress (Format - CSV) (\"Values:\" + postalCode + city + state + address + landmark	+ phoneNumber)

 */
export type OriginAddressAddressKeyFormat = z.infer<typeof originAddressAddressKeyFormat>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const originAddressAddressKeyFormatResponse: any = z.lazy(() => {
  return z
    .object({
      ConsigneeName: z.string().min(1).max(40).optional(),
      AddressLine: z.string().min(1).max(100),
      AddressLine2: z.string().min(1).max(64).optional(),
      AddressLine3: z.string().min(1).max(64).optional(),
      PoliticalDivision3: z.string().min(1).max(35).optional(),
      PoliticalDivision2: z.string().min(1).max(50),
      PoliticalDivision1: z.string().min(1).max(50),
      PostcodePrimaryLow: z.string().min(1).max(10),
      PostcodeExtendedLow: z.string().min(1).max(10).optional(),
      CountryCode: z.string().min(1).max(2),
      SingleLineAddress: z.string().optional(),
    })
    .transform((data) => ({
      consigneeName: data['ConsigneeName'],
      addressLine: data['AddressLine'],
      addressLine2: data['AddressLine2'],
      addressLine3: data['AddressLine3'],
      politicalDivision3: data['PoliticalDivision3'],
      politicalDivision2: data['PoliticalDivision2'],
      politicalDivision1: data['PoliticalDivision1'],
      postcodePrimaryLow: data['PostcodePrimaryLow'],
      postcodeExtendedLow: data['PostcodeExtendedLow'],
      countryCode: data['CountryCode'],
      singleLineAddress: data['SingleLineAddress'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const originAddressAddressKeyFormatRequest: any = z.lazy(() => {
  return z
    .object({
      consigneeName: z.string().nullish(),
      addressLine: z.string().nullish(),
      addressLine2: z.string().nullish(),
      addressLine3: z.string().nullish(),
      politicalDivision3: z.string().nullish(),
      politicalDivision2: z.string().nullish(),
      politicalDivision1: z.string().nullish(),
      postcodePrimaryLow: z.string().nullish(),
      postcodeExtendedLow: z.string().nullish(),
      countryCode: z.string().nullish(),
      singleLineAddress: z.string().nullish(),
    })
    .transform((data) => ({
      ConsigneeName: data['consigneeName'],
      AddressLine: data['addressLine'],
      AddressLine2: data['addressLine2'],
      AddressLine3: data['addressLine3'],
      PoliticalDivision3: data['politicalDivision3'],
      PoliticalDivision2: data['politicalDivision2'],
      PoliticalDivision1: data['politicalDivision1'],
      PostcodePrimaryLow: data['postcodePrimaryLow'],
      PostcodeExtendedLow: data['postcodeExtendedLow'],
      CountryCode: data['countryCode'],
      SingleLineAddress: data['singleLineAddress'],
    }));
});
