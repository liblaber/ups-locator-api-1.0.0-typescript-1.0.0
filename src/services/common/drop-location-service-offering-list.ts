// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  serviceOfferingListServiceOffering,
  serviceOfferingListServiceOfferingRequest,
  serviceOfferingListServiceOfferingResponse,
} from './service-offering-list-service-offering';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationServiceOfferingList = z.object({
  serviceOffering: z.array(serviceOfferingListServiceOffering),
});

/**
 * Container to hold the list of service offerings at the end point.
 * @typedef  {DropLocationServiceOfferingList} dropLocationServiceOfferingList - Container to hold the list of service offerings at the end point. - Container to hold the list of service offerings at the end point.
 * @property {ServiceOfferingListServiceOffering[]} - Container for Service offering code.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 */
export type DropLocationServiceOfferingList = z.infer<typeof dropLocationServiceOfferingList>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationServiceOfferingListResponse = z
  .object({
    ServiceOffering: z.array(serviceOfferingListServiceOfferingResponse),
  })
  .transform((data) => ({
    serviceOffering: data['ServiceOffering'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationServiceOfferingListRequest = z
  .object({ serviceOffering: z.array(serviceOfferingListServiceOfferingRequest).nullish() })
  .transform((data) => ({
    ServiceOffering: data['serviceOffering'],
  }));
