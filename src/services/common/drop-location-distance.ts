// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  distanceUnitOfMeasurement,
  distanceUnitOfMeasurementRequest,
  distanceUnitOfMeasurementResponse,
} from './distance-unit-of-measurement';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationDistance: any = z.lazy(() => {
  return z.object({
    value: z.string().min(1).max(4),
    unitOfMeasurement: distanceUnitOfMeasurement,
  });
});

/**
 * Container for the straight line distance from the origin to the UPS location.
 * @typedef  {DropLocationDistance} dropLocationDistance - Container for the straight line distance from the origin to the UPS location. - Container for the straight line distance from the origin to the UPS location.
 * @property {string} - The straight line distance from the origin to the UPS location. Distance value may include one decimal and followed by one decimal place.
 * @property {DistanceUnitOfMeasurement} - The unit of measurement the user will see for the distance is based on the user input provided in the search request.
 */
export type DropLocationDistance = z.infer<typeof dropLocationDistance>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationDistanceResponse: any = z.lazy(() => {
  return z
    .object({
      Value: z.string().min(1).max(4),
      UnitOfMeasurement: distanceUnitOfMeasurementResponse,
    })
    .transform((data) => ({
      value: data['Value'],
      unitOfMeasurement: data['UnitOfMeasurement'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationDistanceRequest: any = z.lazy(() => {
  return z
    .object({ value: z.string().nullish(), unitOfMeasurement: distanceUnitOfMeasurementRequest.nullish() })
    .transform((data) => ({
      Value: data['value'],
      UnitOfMeasurement: data['unitOfMeasurement'],
    }));
});
