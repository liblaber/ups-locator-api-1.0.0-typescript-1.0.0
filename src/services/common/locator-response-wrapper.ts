// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { locatorResponse, locatorResponseRequest, locatorResponseResponse } from './locator-response';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorResponseWrapper: any = z.lazy(() => {
  return z.object({
    locatorResponse: locatorResponse,
  });
});

/**
 * N/A
 * @typedef  {LocatorResponseWrapper} locatorResponseWrapper - N/A   - N/A
 * @property {LocatorResponse} - Container for LocatorResponse.
 */
export type LocatorResponseWrapper = z.infer<typeof locatorResponseWrapper>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseWrapperResponse: any = z.lazy(() => {
  return z
    .object({
      LocatorResponse: locatorResponseResponse,
    })
    .transform((data) => ({
      locatorResponse: data['LocatorResponse'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseWrapperRequest: any = z.lazy(() => {
  return z.object({ locatorResponse: locatorResponseRequest.nullish() }).transform((data) => ({
    LocatorResponse: data['locatorResponse'],
  }));
});
