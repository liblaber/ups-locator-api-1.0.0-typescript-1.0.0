// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  transportationPickUpSchedulePickUp,
  transportationPickUpSchedulePickUpRequest,
  transportationPickUpSchedulePickUpResponse,
} from './transportation-pick-up-schedule-pick-up';

/**
 * The shape of the model inside the application code - what the users use
 */
export const optionCodeTransportationPickUpSchedule: any = z.lazy(() => {
  return z.object({
    pickUp: z.array(transportationPickUpSchedulePickUp),
  });
});

/**
 * TransportationPickUpSchedule container contains details of Latest Drop Off time/Pickup Time for the transportation services (Ground/Air/Standard/Express/International) of the location.
 * @typedef  {OptionCodeTransportationPickUpSchedule} optionCodeTransportationPickUpSchedule - TransportationPickUpSchedule container contains details of Latest Drop Off time/Pickup Time for the transportation services (Ground/Air/Standard/Express/International) of the location. - TransportationPickUpSchedule container contains details of Latest Drop Off time/Pickup Time for the transportation services (Ground/Air/Standard/Express/International) of the location.
 * @property {TransportationPickUpSchedulePickUp[]} - PickUp container contains details of day of week and corresponding pickup times for that service.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 */
export type OptionCodeTransportationPickUpSchedule = z.infer<typeof optionCodeTransportationPickUpSchedule>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const optionCodeTransportationPickUpScheduleResponse: any = z.lazy(() => {
  return z
    .object({
      PickUp: z.array(transportationPickUpSchedulePickUpResponse),
    })
    .transform((data) => ({
      pickUp: data['PickUp'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const optionCodeTransportationPickUpScheduleRequest: any = z.lazy(() => {
  return z.object({ pickUp: z.array(transportationPickUpSchedulePickUpRequest).nullish() }).transform((data) => ({
    PickUp: data['pickUp'],
  }));
});
