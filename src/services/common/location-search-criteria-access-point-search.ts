// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  accessPointSearchIncludeCriteria,
  accessPointSearchIncludeCriteriaRequest,
  accessPointSearchIncludeCriteriaResponse,
} from './access-point-search-include-criteria';
import {
  accessPointSearchExcludeFromResult,
  accessPointSearchExcludeFromResultRequest,
  accessPointSearchExcludeFromResultResponse,
} from './access-point-search-exclude-from-result';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locationSearchCriteriaAccessPointSearch: any = z.lazy(() => {
  return z.object({
    publicAccessPointId: z.string().min(1).max(15).optional(),
    accessPointStatus: z.string().min(2).max(2).optional(),
    accountNumber: z.string().min(6).max(10).optional(),
    includeCriteria: accessPointSearchIncludeCriteria.optional(),
    excludeFromResult: accessPointSearchExcludeFromResult.optional(),
    exactMatchIndicator: z.string().optional(),
    existIndicator: z.string().optional(),
  });
});

/**
 * Applicable for request option 64 only. This contains inclusion and exclusion criteria for address search. It also contains Account Number and Access Point Public ID search elements.
 * @typedef  {LocationSearchCriteriaAccessPointSearch} locationSearchCriteriaAccessPointSearch - Applicable for request option 64 only. This contains inclusion and exclusion criteria for address search. It also contains Account Number and Access Point Public ID search elements. - Applicable for request option 64 only. This contains inclusion and exclusion criteria for address search. It also contains Account Number and Access Point Public ID search elements.
 * @property {string} - The Public Access Point ID to use for UPS Access Point Search. Once this parameter is present , address or geocode search is ignored. It cannot be combined with AccountNumber search parameter.
 * @property {string} - Status of UPS Access Point. Valid values are: 
01-Active-available
07-Active-unavailable.
 * @property {string} - The account number to use for UPS Access Point Search in the country or territory. Used to locate a private network for the account. Once this parameter is present any access point address or geocode search is ignored. It cannot be combined with PublicAccessPointID search parameter.
 * @property {AccessPointSearchIncludeCriteria} - This contains elements to refine (include) UPS Access point address or geocode Search.
 * @property {AccessPointSearchExcludeFromResult} - This contains elements to exclude from UPS Access Point address or geocode search.
 * @property {string} - Presence of this tag represents that "AccessPointSearchByAddress" service is requested. The value of this tag is ignored.
 * @property {string} - Presence of this tag represents that "AccessPointAvailability" service is requested. The value of this tag is ignored.
 */
export type LocationSearchCriteriaAccessPointSearch = z.infer<typeof locationSearchCriteriaAccessPointSearch>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locationSearchCriteriaAccessPointSearchResponse: any = z.lazy(() => {
  return z
    .object({
      PublicAccessPointID: z.string().min(1).max(15).optional(),
      AccessPointStatus: z.string().min(2).max(2).optional(),
      AccountNumber: z.string().min(6).max(10).optional(),
      IncludeCriteria: accessPointSearchIncludeCriteriaResponse.optional(),
      ExcludeFromResult: accessPointSearchExcludeFromResultResponse.optional(),
      ExactMatchIndicator: z.string().optional(),
      ExistIndicator: z.string().optional(),
    })
    .transform((data) => ({
      publicAccessPointId: data['PublicAccessPointID'],
      accessPointStatus: data['AccessPointStatus'],
      accountNumber: data['AccountNumber'],
      includeCriteria: data['IncludeCriteria'],
      excludeFromResult: data['ExcludeFromResult'],
      exactMatchIndicator: data['ExactMatchIndicator'],
      existIndicator: data['ExistIndicator'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locationSearchCriteriaAccessPointSearchRequest: any = z.lazy(() => {
  return z
    .object({
      publicAccessPointId: z.string().nullish(),
      accessPointStatus: z.string().nullish(),
      accountNumber: z.string().nullish(),
      includeCriteria: accessPointSearchIncludeCriteriaRequest.nullish(),
      excludeFromResult: accessPointSearchExcludeFromResultRequest.nullish(),
      exactMatchIndicator: z.string().nullish(),
      existIndicator: z.string().nullish(),
    })
    .transform((data) => ({
      PublicAccessPointID: data['publicAccessPointId'],
      AccessPointStatus: data['accessPointStatus'],
      AccountNumber: data['accountNumber'],
      IncludeCriteria: data['includeCriteria'],
      ExcludeFromResult: data['excludeFromResult'],
      ExactMatchIndicator: data['exactMatchIndicator'],
      ExistIndicator: data['existIndicator'],
    }));
});
