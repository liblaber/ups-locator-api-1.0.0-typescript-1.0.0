// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const searchOptionOptionCode = z.object({
  code: z.string().min(1).max(10),
});

/**
 * Option code contains the information of a particular Location, Retail Location, Additional Service, Program Type or End Point Service Offering depending on the option type. 
The SearchOptions can contain one or more OptionCodes which forms the criteria for the location search.
 * @typedef  {SearchOptionOptionCode} searchOptionOptionCode - Option code contains the information of a particular Location, Retail Location, Additional Service, Program Type or End Point Service Offering depending on the option type. 
The SearchOptions can contain one or more OptionCodes which forms the criteria for the location search. - Option code contains the information of a particular Location, Retail Location, Additional Service, Program Type or End Point Service Offering depending on the option type. 
The SearchOptions can contain one or more OptionCodes which forms the criteria for the location search.
 * @property {string} - These codes vary by country. It is strongly recommended that clients contact UPS to retrieve the primary search indicator and the valid Location Types and Service Level Options for each country or territory.

Refer to Location Search Option Codes in the Appendix for additional information.

 */
export type SearchOptionOptionCode = z.infer<typeof searchOptionOptionCode>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const searchOptionOptionCodeResponse = z
  .object({
    Code: z.string().min(1).max(10),
  })
  .transform((data) => ({
    code: data['Code'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const searchOptionOptionCodeRequest = z.object({ code: z.string().nullish() }).transform((data) => ({
  Code: data['code'],
}));
