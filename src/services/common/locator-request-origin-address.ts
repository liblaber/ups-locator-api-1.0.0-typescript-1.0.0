// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  originAddressGeocode,
  originAddressGeocodeRequest,
  originAddressGeocodeResponse,
} from './origin-address-geocode';
import {
  originAddressAddressKeyFormat,
  originAddressAddressKeyFormatRequest,
  originAddressAddressKeyFormatResponse,
} from './origin-address-address-key-format';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequestOriginAddress = z.object({
  geocode: originAddressGeocode.optional(),
  addressKeyFormat: originAddressAddressKeyFormat,
  maximumListSize: z.string().min(1).max(2).optional(),
});

/**
 * Container for origin address information.
 * @typedef  {LocatorRequestOriginAddress} locatorRequestOriginAddress - Container for origin address information. - Container for origin address information.
 * @property {OriginAddressGeocode} - Geocode is the latitude and longitude of the origin address.
 * @property {OriginAddressAddressKeyFormat} - Contains all of the basic information about the origin such as: Address Lines, City, State/Province, Postal Code and Country or Territory Code. 
The element CountryCode is required.
 * @property {string} - If present, indicates the maximum number of locations the client wishes to receive in an address candidate response where the provided origin information is insufficient to accurately establish location. 

Valid values: 1-50, default 10
 */
export type LocatorRequestOriginAddress = z.infer<typeof locatorRequestOriginAddress>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestOriginAddressResponse = z
  .object({
    Geocode: originAddressGeocodeResponse.optional(),
    AddressKeyFormat: originAddressAddressKeyFormatResponse,
    MaximumListSize: z.string().min(1).max(2).optional(),
  })
  .transform((data) => ({
    geocode: data['Geocode'],
    addressKeyFormat: data['AddressKeyFormat'],
    maximumListSize: data['MaximumListSize'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestOriginAddressRequest = z
  .object({
    geocode: originAddressGeocodeRequest.nullish(),
    addressKeyFormat: originAddressAddressKeyFormatRequest.nullish(),
    maximumListSize: z.string().nullish(),
  })
  .transform((data) => ({
    Geocode: data['geocode'],
    AddressKeyFormat: data['addressKeyFormat'],
    MaximumListSize: data['maximumListSize'],
  }));
