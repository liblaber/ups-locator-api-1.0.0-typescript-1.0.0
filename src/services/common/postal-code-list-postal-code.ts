// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const postalCodeListPostalCode = z.object({
  primaryPostalCode: z.string().min(1).max(10),
  secondaryPostalCode: z.string().min(1).max(10).optional(),
});

/**
 * Container to hold the postal code .
 * @typedef  {PostalCodeListPostalCode} postalCodeListPostalCode - Container to hold the postal code . - Container to hold the postal code .
 * @property {string} - Primary postal code.
 * @property {string} - Secondary postal code.
 */
export type PostalCodeListPostalCode = z.infer<typeof postalCodeListPostalCode>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const postalCodeListPostalCodeResponse = z
  .object({
    PrimaryPostalCode: z.string().min(1).max(10),
    SecondaryPostalCode: z.string().min(1).max(10).optional(),
  })
  .transform((data) => ({
    primaryPostalCode: data['PrimaryPostalCode'],
    secondaryPostalCode: data['SecondaryPostalCode'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const postalCodeListPostalCodeRequest = z
  .object({ primaryPostalCode: z.string().nullish(), secondaryPostalCode: z.string().nullish() })
  .transform((data) => ({
    PrimaryPostalCode: data['primaryPostalCode'],
    SecondaryPostalCode: data['secondaryPostalCode'],
  }));
