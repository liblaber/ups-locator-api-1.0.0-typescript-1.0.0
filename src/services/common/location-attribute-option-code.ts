// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  optionCodeTransportationPickUpSchedule,
  optionCodeTransportationPickUpScheduleRequest,
  optionCodeTransportationPickUpScheduleResponse,
} from './option-code-transportation-pick-up-schedule';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locationAttributeOptionCode: any = z.lazy(() => {
  return z.object({
    category: z.string().optional(),
    code: z.string(),
    description: z.string().min(1).max(50),
    name: z.string().min(1).max(50).optional(),
    transportationPickUpSchedule: optionCodeTransportationPickUpSchedule.optional(),
  });
});

/**
 * 
 * @typedef  {LocationAttributeOptionCode} locationAttributeOptionCode   
 * @property {string} - Only applicabe for OptionType = 03 (Additional Services). Valid values:
- 06 - Non transportation
- 07 - Transportation

 * @property {string} - These codes vary by country or territory. It is strongly recommended that clients contact UPS to retrieve the primary search indicator and the valid Location Types and Service Level Options for each country. Refer to Location Search Option Codes in the Appendix for additional information.
 * @property {string} - Description is only applicable for Location and Retail Location. The description for Program types and additional service is not provided with Location detail.

It is only provided when the request is for 8, 24, 40, 56-All available additional services or 16, 24, 48, 56-all available Program types.

 * @property {string} - Name will indicate the name of any Additional Services/ Program Types depending on the option code. Text will be displayed in the locale selected.
 * @property {OptionCodeTransportationPickUpSchedule} - TransportationPickUpSchedule container contains details of Latest Drop Off time/Pickup Time for the transportation services (Ground/Air/Standard/Express/International) of the location.
 */
export type LocationAttributeOptionCode = z.infer<typeof locationAttributeOptionCode>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locationAttributeOptionCodeResponse: any = z.lazy(() => {
  return z
    .object({
      Category: z.string().optional(),
      Code: z.string(),
      Description: z.string().min(1).max(50),
      Name: z.string().min(1).max(50).optional(),
      TransportationPickUpSchedule: optionCodeTransportationPickUpScheduleResponse.optional(),
    })
    .transform((data) => ({
      category: data['Category'],
      code: data['Code'],
      description: data['Description'],
      name: data['Name'],
      transportationPickUpSchedule: data['TransportationPickUpSchedule'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locationAttributeOptionCodeRequest: any = z.lazy(() => {
  return z
    .object({
      category: z.string().nullish(),
      code: z.string().nullish(),
      description: z.string().nullish(),
      name: z.string().nullish(),
      transportationPickUpSchedule: optionCodeTransportationPickUpScheduleRequest.nullish(),
    })
    .transform((data) => ({
      Category: data['category'],
      Code: data['code'],
      Description: data['description'],
      Name: data['name'],
      TransportationPickUpSchedule: data['transportationPickUpSchedule'],
    }));
});
