// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequestTranslate: any = z.lazy(() => {
  return z.object({
    locale: z.string().min(5).max(5).optional(),
  });
});

/**
 * Contains the locale information for the request.
 * @typedef  {LocatorRequestTranslate} locatorRequestTranslate - Contains the locale information for the request. - Contains the locale information for the request.
 * @property {string} - Locale is the 5 digit combination of 2 character language code and 2 character country or territory code separated by an underscore ('_') character. Will be used to determine what language the response will be sent in. 
Default value is: en_US. 
Examples are: fr_CA, es_MX.
 */
export type LocatorRequestTranslate = z.infer<typeof locatorRequestTranslate>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestTranslateResponse: any = z.lazy(() => {
  return z
    .object({
      Locale: z.string().min(5).max(5).optional(),
    })
    .transform((data) => ({
      locale: data['Locale'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestTranslateRequest: any = z.lazy(() => {
  return z.object({ locale: z.string().nullish() }).transform((data) => ({
    Locale: data['locale'],
  }));
});
