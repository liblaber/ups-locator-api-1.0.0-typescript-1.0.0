// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationSpecialInstructions = z.object({
  segment: z.string(),
});

/**
 *
 * @typedef  {DropLocationSpecialInstructions} dropLocationSpecialInstructions
 * @property {string} - Walking directions, last 50 feet.
 */
export type DropLocationSpecialInstructions = z.infer<typeof dropLocationSpecialInstructions>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationSpecialInstructionsResponse = z
  .object({
    Segment: z.string(),
  })
  .transform((data) => ({
    segment: data['Segment'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationSpecialInstructionsRequest = z.object({ segment: z.string().nullish() }).transform((data) => ({
  Segment: data['segment'],
}));
