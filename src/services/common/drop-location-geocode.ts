// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationGeocode: any = z.lazy(() => {
  return z.object({
    latitude: z.string(),
    longitude: z.string(),
  });
});

/**
 * Geocode is the latitude and longitude of the location address. The Geocode for the location address will be returned when Location is requested in the Request Option.
 * @typedef  {DropLocationGeocode} dropLocationGeocode - Geocode is the latitude and longitude of the location address. The Geocode for the location address will be returned when Location is requested in the Request Option. - Geocode is the latitude and longitude of the location address. The Geocode for the location address will be returned when Location is requested in the Request Option.
 * @property {string} - The latitude of the location address or the center point of the area code.
 * @property {string} - The longitude of the location address or the center point of the area code.
 */
export type DropLocationGeocode = z.infer<typeof dropLocationGeocode>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationGeocodeResponse: any = z.lazy(() => {
  return z
    .object({
      Latitude: z.string(),
      Longitude: z.string(),
    })
    .transform((data) => ({
      latitude: data['Latitude'],
      longitude: data['Longitude'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationGeocodeRequest: any = z.lazy(() => {
  return z.object({ latitude: z.string().nullish(), longitude: z.string().nullish() }).transform((data) => ({
    Latitude: data['latitude'],
    Longitude: data['longitude'],
  }));
});
