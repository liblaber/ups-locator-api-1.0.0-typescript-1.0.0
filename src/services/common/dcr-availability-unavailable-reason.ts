// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dcrAvailabilityUnavailableReason = z.object({
  code: z.string(),
  description: z.string(),
});

/**
 * Container to hold shipping unavailable reason.
 * @typedef  {DcrAvailabilityUnavailableReason} dcrAvailabilityUnavailableReason - Container to hold shipping unavailable reason. - Container to hold shipping unavailable reason.
 * @property {string} - Code for DCR/DCO unavailability. Valid values: 
01-Temporarily Unavailable 
02-Location Full
03-Unavailable
04-Weather
 * @property {string} - Description for DCR/ DCO unavailability.
 */
export type DcrAvailabilityUnavailableReason = z.infer<typeof dcrAvailabilityUnavailableReason>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dcrAvailabilityUnavailableReasonResponse = z
  .object({
    Code: z.string(),
    Description: z.string(),
  })
  .transform((data) => ({
    code: data['Code'],
    description: data['Description'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dcrAvailabilityUnavailableReasonRequest = z
  .object({ code: z.string().nullish(), description: z.string().nullish() })
  .transform((data) => ({
    Code: data['code'],
    Description: data['description'],
  }));
