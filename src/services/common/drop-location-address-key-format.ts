// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationAddressKeyFormat = z.object({
  consigneeName: z.string().optional(),
  addressLine: z.string(),
  politicalDivision3: z.string().optional(),
  politicalDivision2: z.string(),
  politicalDivision1: z.string(),
  postcodePrimaryLow: z.string(),
  postcodeExtendedLow: z.string().optional(),
  countryCode: z.string(),
});

/**
 * Contains all of the basic information about a location, Consignee Name, Building Name, Address Lines, City, State/Province, Postal Code and Country or Terriotry Code.
 * @typedef  {DropLocationAddressKeyFormat} dropLocationAddressKeyFormat - Contains all of the basic information about a location, Consignee Name, Building Name, Address Lines, City, State/Province, Postal Code and Country or Terriotry Code. - Contains all of the basic information about a location, Consignee Name, Building Name, Address Lines, City, State/Province, Postal Code and Country or Terriotry Code.
 * @property {string} - Name. (Also includes the building name)Return if available.
 * @property {string} - Address Line Information of the UPS location The address level or Intersection information. Only two address lines will be returned. The second line may contain such information as the building name, the suite, and room.
 * @property {string} - Subdivision within a City. e.g., a Barrio.
 * @property {string} - City.
 * @property {string} - State/Province.
 * @property {string} - Postal Code.
 * @property {string} - 4 Digit postal code extension. Valid for US only.
 * @property {string} - A country or territory code. Valid values to be returned are: US-United States (meaning US 50).
 */
export type DropLocationAddressKeyFormat = z.infer<typeof dropLocationAddressKeyFormat>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationAddressKeyFormatResponse = z
  .object({
    ConsigneeName: z.string().optional(),
    AddressLine: z.string(),
    PoliticalDivision3: z.string().optional(),
    PoliticalDivision2: z.string(),
    PoliticalDivision1: z.string(),
    PostcodePrimaryLow: z.string(),
    PostcodeExtendedLow: z.string().optional(),
    CountryCode: z.string(),
  })
  .transform((data) => ({
    consigneeName: data['ConsigneeName'],
    addressLine: data['AddressLine'],
    politicalDivision3: data['PoliticalDivision3'],
    politicalDivision2: data['PoliticalDivision2'],
    politicalDivision1: data['PoliticalDivision1'],
    postcodePrimaryLow: data['PostcodePrimaryLow'],
    postcodeExtendedLow: data['PostcodeExtendedLow'],
    countryCode: data['CountryCode'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationAddressKeyFormatRequest = z
  .object({
    consigneeName: z.string().nullish(),
    addressLine: z.string().nullish(),
    politicalDivision3: z.string().nullish(),
    politicalDivision2: z.string().nullish(),
    politicalDivision1: z.string().nullish(),
    postcodePrimaryLow: z.string().nullish(),
    postcodeExtendedLow: z.string().nullish(),
    countryCode: z.string().nullish(),
  })
  .transform((data) => ({
    ConsigneeName: data['consigneeName'],
    AddressLine: data['addressLine'],
    PoliticalDivision3: data['politicalDivision3'],
    PoliticalDivision2: data['politicalDivision2'],
    PoliticalDivision1: data['politicalDivision1'],
    PostcodePrimaryLow: data['postcodePrimaryLow'],
    PostcodeExtendedLow: data['postcodeExtendedLow'],
    CountryCode: data['countryCode'],
  }));
