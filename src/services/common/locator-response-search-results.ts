// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  searchResultsGeocodeCandidate,
  searchResultsGeocodeCandidateRequest,
  searchResultsGeocodeCandidateResponse,
} from './search-results-geocode-candidate';
import {
  searchResultsDropLocation,
  searchResultsDropLocationRequest,
  searchResultsDropLocationResponse,
} from './search-results-drop-location';
import {
  searchResultsAvailableLocationAttributes,
  searchResultsAvailableLocationAttributesRequest,
  searchResultsAvailableLocationAttributesResponse,
} from './search-results-available-location-attributes';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorResponseSearchResults = z.object({
  geocodeCandidate: z.array(searchResultsGeocodeCandidate).optional(),
  disclaimer: z.string().optional(),
  dropLocation: z.array(searchResultsDropLocation).optional(),
  availableLocationAttributes: z.array(searchResultsAvailableLocationAttributes).optional(),
  activeAvailableAccessPointIndicator: z.string().optional(),
});

/**
 * Container for search results.
 * @typedef  {LocatorResponseSearchResults} locatorResponseSearchResults - Container for search results. - Container for search results.
 * @property {SearchResultsGeocodeCandidate[]} - If the origin address provided in the location request document does not have a match, a list of candidate addresses, geocodes and optionally a landmark will be returned.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 * @property {string} - Disclaimer. In the event the user requested Ground and Air service types and the maximum UPS locations list size has not been met, the list of locations will continue with locations that provide either ground or air within the search radius. 

The disclaimer will note this deviation from the requested search criteria. The disclaimer is also the location where the user will receive information regarding a one-time pickup option if the first location is greater than 20 miles from the origin.
 * @property {SearchResultsDropLocation[]} - When a location request is submitted with a valid origin address, UPS locations will be returned.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 * @property {SearchResultsAvailableLocationAttributes[]} - This container contains the information about the currently existing Retail Locations or Additional Services or Program types.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 * @property {string} - Indicates whether the country or territory has AccessPoints or not. 

This tag is populated in the Response only if tag "ExistIndicator" was present in the Locator request.
 */
export type LocatorResponseSearchResults = z.infer<typeof locatorResponseSearchResults>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseSearchResultsResponse = z
  .object({
    GeocodeCandidate: z.array(searchResultsGeocodeCandidateResponse).optional(),
    Disclaimer: z.string().optional(),
    DropLocation: z.array(searchResultsDropLocationResponse).optional(),
    AvailableLocationAttributes: z.array(searchResultsAvailableLocationAttributesResponse).optional(),
    ActiveAvailableAccessPointIndicator: z.string().optional(),
  })
  .transform((data) => ({
    geocodeCandidate: data['GeocodeCandidate'],
    disclaimer: data['Disclaimer'],
    dropLocation: data['DropLocation'],
    availableLocationAttributes: data['AvailableLocationAttributes'],
    activeAvailableAccessPointIndicator: data['ActiveAvailableAccessPointIndicator'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseSearchResultsRequest = z
  .object({
    geocodeCandidate: z.array(searchResultsGeocodeCandidateRequest).nullish(),
    disclaimer: z.string().nullish(),
    dropLocation: z.array(searchResultsDropLocationRequest).nullish(),
    availableLocationAttributes: z.array(searchResultsAvailableLocationAttributesRequest).nullish(),
    activeAvailableAccessPointIndicator: z.string().nullish(),
  })
  .transform((data) => ({
    GeocodeCandidate: data['geocodeCandidate'],
    Disclaimer: data['disclaimer'],
    DropLocation: data['dropLocation'],
    AvailableLocationAttributes: data['availableLocationAttributes'],
    ActiveAvailableAccessPointIndicator: data['activeAvailableAccessPointIndicator'],
  }));
