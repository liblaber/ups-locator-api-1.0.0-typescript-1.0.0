// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  locatorRequestRequest1,
  locatorRequestRequest1Request,
  locatorRequestRequest1Response,
} from './locator-request-request-1';
import {
  locatorRequestOriginAddress,
  locatorRequestOriginAddressRequest,
  locatorRequestOriginAddressResponse,
} from './locator-request-origin-address';
import {
  locatorRequestTranslate,
  locatorRequestTranslateRequest,
  locatorRequestTranslateResponse,
} from './locator-request-translate';
import {
  locatorRequestUnitOfMeasurement,
  locatorRequestUnitOfMeasurementRequest,
  locatorRequestUnitOfMeasurementResponse,
} from './locator-request-unit-of-measurement';
import {
  locatorRequestLocationSearchCriteria,
  locatorRequestLocationSearchCriteriaRequest,
  locatorRequestLocationSearchCriteriaResponse,
} from './locator-request-location-search-criteria';
import {
  locatorRequestSortCriteria,
  locatorRequestSortCriteriaRequest,
  locatorRequestSortCriteriaResponse,
} from './locator-request-sort-criteria';
import {
  locatorRequestServiceGeoUnit,
  locatorRequestServiceGeoUnitRequest,
  locatorRequestServiceGeoUnitResponse,
} from './locator-request-service-geo-unit';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequest = z.object({
  request: locatorRequestRequest1,
  originAddress: locatorRequestOriginAddress,
  translate: locatorRequestTranslate,
  unitOfMeasurement: locatorRequestUnitOfMeasurement.optional(),
  locationId: z.array(z.string()).optional(),
  locationSearchCriteria: locatorRequestLocationSearchCriteria.optional(),
  sortCriteria: locatorRequestSortCriteria.optional(),
  allowAllConfidenceLevels: z.string().optional(),
  searchOptionCode: z.string().min(2).max(2).optional(),
  serviceGeoUnit: locatorRequestServiceGeoUnit.optional(),
  freightIndicator: z.string().optional(),
});

/**
 * N/A
 * @typedef  {LocatorRequest} locatorRequest - N/A - N/A
 * @property {LocatorRequestRequest1} - N/A
 * @property {LocatorRequestOriginAddress} - Container for origin address information.
 * @property {LocatorRequestTranslate} - Contains the locale information for the request.
 * @property {LocatorRequestUnitOfMeasurement} - Distance unit of measurement. This is required for location requests (request option 1).
 * @property {string[]} - Location ID is the identification number of the UPS affiliated location.
 * @property {LocatorRequestLocationSearchCriteria} - The Location search criteria container allows the user to further define the basis to which they wish to receive the UPS locations. 
Only relevant when the user requests a Location search (request option 1).
 * @property {LocatorRequestSortCriteria} - Container for Sort Criteria
 * @property {string} - Indicator to allow confidence level in search.
 * @property {string} - Valid values: 
01-Proximity Search Details
02-Address Search Details
03-Proximity Search Summary
04-Address Search Summary
05-Freight Will Call Search. 
Either OptionType 03 or 04 is required.
 * @property {LocatorRequestServiceGeoUnit} - ServiceGeoUnit Container. Required to search for the freight facility information
 * @property {string} - FreightIndicator. Required for Freight Location Search.
 */
export type LocatorRequest = z.infer<typeof locatorRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestResponse = z
  .object({
    Request: locatorRequestRequest1Response,
    OriginAddress: locatorRequestOriginAddressResponse,
    Translate: locatorRequestTranslateResponse,
    UnitOfMeasurement: locatorRequestUnitOfMeasurementResponse.optional(),
    LocationID: z.array(z.string()).optional(),
    LocationSearchCriteria: locatorRequestLocationSearchCriteriaResponse.optional(),
    SortCriteria: locatorRequestSortCriteriaResponse.optional(),
    AllowAllConfidenceLevels: z.string().optional(),
    SearchOptionCode: z.string().min(2).max(2).optional(),
    ServiceGeoUnit: locatorRequestServiceGeoUnitResponse.optional(),
    FreightIndicator: z.string().optional(),
  })
  .transform((data) => ({
    request: data['Request'],
    originAddress: data['OriginAddress'],
    translate: data['Translate'],
    unitOfMeasurement: data['UnitOfMeasurement'],
    locationId: data['LocationID'],
    locationSearchCriteria: data['LocationSearchCriteria'],
    sortCriteria: data['SortCriteria'],
    allowAllConfidenceLevels: data['AllowAllConfidenceLevels'],
    searchOptionCode: data['SearchOptionCode'],
    serviceGeoUnit: data['ServiceGeoUnit'],
    freightIndicator: data['FreightIndicator'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestRequest = z
  .object({
    request: locatorRequestRequest1Request.nullish(),
    originAddress: locatorRequestOriginAddressRequest.nullish(),
    translate: locatorRequestTranslateRequest.nullish(),
    unitOfMeasurement: locatorRequestUnitOfMeasurementRequest.nullish(),
    locationId: z.array(z.string()).nullish(),
    locationSearchCriteria: locatorRequestLocationSearchCriteriaRequest.nullish(),
    sortCriteria: locatorRequestSortCriteriaRequest.nullish(),
    allowAllConfidenceLevels: z.string().nullish(),
    searchOptionCode: z.string().nullish(),
    serviceGeoUnit: locatorRequestServiceGeoUnitRequest.nullish(),
    freightIndicator: z.string().nullish(),
  })
  .transform((data) => ({
    Request: data['request'],
    OriginAddress: data['originAddress'],
    Translate: data['translate'],
    UnitOfMeasurement: data['unitOfMeasurement'],
    LocationID: data['locationId'],
    LocationSearchCriteria: data['locationSearchCriteria'],
    SortCriteria: data['sortCriteria'],
    AllowAllConfidenceLevels: data['allowAllConfidenceLevels'],
    SearchOptionCode: data['searchOptionCode'],
    ServiceGeoUnit: data['serviceGeoUnit'],
    FreightIndicator: data['freightIndicator'],
  }));
