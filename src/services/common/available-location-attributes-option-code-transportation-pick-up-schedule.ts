// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  availableLocationAttributesTransportationPickUpSchedulePickUp,
  availableLocationAttributesTransportationPickUpSchedulePickUpRequest,
  availableLocationAttributesTransportationPickUpSchedulePickUpResponse,
} from './available-location-attributes-transportation-pick-up-schedule-pick-up';

/**
 * The shape of the model inside the application code - what the users use
 */
export const availableLocationAttributesOptionCodeTransportationPickUpSchedule: any = z.lazy(() => {
  return z.object({
    pickUp: z.array(availableLocationAttributesTransportationPickUpSchedulePickUp),
  });
});

/**
 * Container to hold information regarding pickup details for each day of the week.
 * @typedef  {AvailableLocationAttributesOptionCodeTransportationPickUpSchedule} availableLocationAttributesOptionCodeTransportationPickUpSchedule - Container to hold information regarding pickup details for each day of the week. - Container to hold information regarding pickup details for each day of the week.
 * @property {AvailableLocationAttributesTransportationPickUpSchedulePickUp[]} - Container to hold information regarding pickup day of the week and details.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 */
export type AvailableLocationAttributesOptionCodeTransportationPickUpSchedule = z.infer<
  typeof availableLocationAttributesOptionCodeTransportationPickUpSchedule
>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const availableLocationAttributesOptionCodeTransportationPickUpScheduleResponse: any = z.lazy(() => {
  return z
    .object({
      PickUp: z.array(availableLocationAttributesTransportationPickUpSchedulePickUpResponse),
    })
    .transform((data) => ({
      pickUp: data['PickUp'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const availableLocationAttributesOptionCodeTransportationPickUpScheduleRequest: any = z.lazy(() => {
  return z
    .object({ pickUp: z.array(availableLocationAttributesTransportationPickUpSchedulePickUpRequest).nullish() })
    .transform((data) => ({
      PickUp: data['pickUp'],
    }));
});
