// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  locationSearchCriteriaSearchOption,
  locationSearchCriteriaSearchOptionRequest,
  locationSearchCriteriaSearchOptionResponse,
} from './location-search-criteria-search-option';
import {
  locationSearchCriteriaServiceSearch,
  locationSearchCriteriaServiceSearchRequest,
  locationSearchCriteriaServiceSearchResponse,
} from './location-search-criteria-service-search';
import {
  locationSearchCriteriaFreightWillCallSearch,
  locationSearchCriteriaFreightWillCallSearchRequest,
  locationSearchCriteriaFreightWillCallSearchResponse,
} from './location-search-criteria-freight-will-call-search';
import {
  locationSearchCriteriaAccessPointSearch,
  locationSearchCriteriaAccessPointSearchRequest,
  locationSearchCriteriaAccessPointSearchResponse,
} from './location-search-criteria-access-point-search';
import {
  locationSearchCriteriaOpenTimeCriteria,
  locationSearchCriteriaOpenTimeCriteriaRequest,
  locationSearchCriteriaOpenTimeCriteriaResponse,
} from './location-search-criteria-open-time-criteria';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequestLocationSearchCriteria: any = z.lazy(() => {
  return z.object({
    searchOption: z.array(locationSearchCriteriaSearchOption).optional(),
    maximumListSize: z.string().min(1).max(2).optional(),
    searchRadius: z.string().min(1).max(3).optional(),
    serviceSearch: locationSearchCriteriaServiceSearch.optional(),
    freightWillCallSearch: locationSearchCriteriaFreightWillCallSearch.optional(),
    accessPointSearch: locationSearchCriteriaAccessPointSearch.optional(),
    openTimeCriteria: locationSearchCriteriaOpenTimeCriteria.optional(),
    brexitFilter: z.string().min(1).max(10).optional(),
  });
});

/**
 * The Location search criteria container allows the user to further define the basis to which they wish to receive the UPS locations. 
Only relevant when the user requests a Location search (request option 1).
 * @typedef  {LocatorRequestLocationSearchCriteria} locatorRequestLocationSearchCriteria - The Location search criteria container allows the user to further define the basis to which they wish to receive the UPS locations. 
Only relevant when the user requests a Location search (request option 1). - The Location search criteria container allows the user to further define the basis to which they wish to receive the UPS locations. 
Only relevant when the user requests a Location search (request option 1).
 * @property {LocationSearchCriteriaSearchOption[]} 
 * @property {string} - If present, indicates the maximum number of locations the client wishes to receive in response; ranges from 1 to 50 with a default value of 5.
 * @property {string} - Defines the maximum radius the user wishes to search for a UPS location. If the user does not specify, the default value is 100 miles. Whole numbers only. 

Valid values are:
5-100 for UnitOfMeasure MI
5-150 for UnitOfMesaure KM
 * @property {LocationSearchCriteriaServiceSearch} - Allows for users to further define the search criteria. Refer to the rules specified in Service Search section.
 * @property {LocationSearchCriteriaFreightWillCallSearch} - Freight Will Call Search Container. Required if SearchOption is '05-Freight Will Call Search'
 * @property {LocationSearchCriteriaAccessPointSearch} - Applicable for request option 64 only. This contains inclusion and exclusion criteria for address search. It also contains Account Number and Access Point Public ID search elements.
 * @property {LocationSearchCriteriaOpenTimeCriteria} - Container to hold open times of the Location.
 * @property {string} - Brexit Filter. Applicable for country code GB; Pass the PostalCode for the address in the location search if Brexit functionality is desired. UAPs with postal code starts with BT returned when brexit filter starts with BT, else UAPs returned with non BT postal code. Applicable for UAP and Proximal building search.
 */
export type LocatorRequestLocationSearchCriteria = z.infer<typeof locatorRequestLocationSearchCriteria>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestLocationSearchCriteriaResponse: any = z.lazy(() => {
  return z
    .object({
      SearchOption: z.array(locationSearchCriteriaSearchOptionResponse).optional(),
      MaximumListSize: z.string().min(1).max(2).optional(),
      SearchRadius: z.string().min(1).max(3).optional(),
      ServiceSearch: locationSearchCriteriaServiceSearchResponse.optional(),
      FreightWillCallSearch: locationSearchCriteriaFreightWillCallSearchResponse.optional(),
      AccessPointSearch: locationSearchCriteriaAccessPointSearchResponse.optional(),
      OpenTimeCriteria: locationSearchCriteriaOpenTimeCriteriaResponse.optional(),
      BrexitFilter: z.string().min(1).max(10).optional(),
    })
    .transform((data) => ({
      searchOption: data['SearchOption'],
      maximumListSize: data['MaximumListSize'],
      searchRadius: data['SearchRadius'],
      serviceSearch: data['ServiceSearch'],
      freightWillCallSearch: data['FreightWillCallSearch'],
      accessPointSearch: data['AccessPointSearch'],
      openTimeCriteria: data['OpenTimeCriteria'],
      brexitFilter: data['BrexitFilter'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestLocationSearchCriteriaRequest: any = z.lazy(() => {
  return z
    .object({
      searchOption: z.array(locationSearchCriteriaSearchOptionRequest).nullish(),
      maximumListSize: z.string().nullish(),
      searchRadius: z.string().nullish(),
      serviceSearch: locationSearchCriteriaServiceSearchRequest.nullish(),
      freightWillCallSearch: locationSearchCriteriaFreightWillCallSearchRequest.nullish(),
      accessPointSearch: locationSearchCriteriaAccessPointSearchRequest.nullish(),
      openTimeCriteria: locationSearchCriteriaOpenTimeCriteriaRequest.nullish(),
      brexitFilter: z.string().nullish(),
    })
    .transform((data) => ({
      SearchOption: data['searchOption'],
      MaximumListSize: data['maximumListSize'],
      SearchRadius: data['searchRadius'],
      ServiceSearch: data['serviceSearch'],
      FreightWillCallSearch: data['freightWillCallSearch'],
      AccessPointSearch: data['accessPointSearch'],
      OpenTimeCriteria: data['openTimeCriteria'],
      BrexitFilter: data['brexitFilter'],
    }));
});
