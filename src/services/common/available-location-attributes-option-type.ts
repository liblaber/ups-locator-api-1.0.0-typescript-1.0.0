// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const availableLocationAttributesOptionType: any = z.lazy(() => {
  return z.object({
    code: z.string(),
    description: z.string(),
  });
});

/**
 * OptionType is a container that indicates the type of the location attribute that are available. For example if the Option Type is RetailLocation the list of all available retail locations will be returned in 1 or many corresponding OptionCodes.
 * @typedef  {AvailableLocationAttributesOptionType} availableLocationAttributesOptionType - OptionType is a container that indicates the type of the location attribute that are available. For example if the Option Type is RetailLocation the list of all available retail locations will be returned in 1 or many corresponding OptionCodes. - OptionType is a container that indicates the type of the location attribute that are available. For example if the Option Type is RetailLocation the list of all available retail locations will be returned in 1 or many corresponding OptionCodes.
 * @property {string} - Code for Option type.
 * @property {string} - Description for Option type such as RetailLocation, AdditionalServices and ProgramType.
 */
export type AvailableLocationAttributesOptionType = z.infer<typeof availableLocationAttributesOptionType>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const availableLocationAttributesOptionTypeResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string(),
      Description: z.string(),
    })
    .transform((data) => ({
      code: data['Code'],
      description: data['Description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const availableLocationAttributesOptionTypeRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish(), description: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
    Description: data['description'],
  }));
});
