// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const serviceSearchServiceCode: any = z.lazy(() => {
  return z.object({
    code: z.string().min(2).max(2),
  });
});

/**
 * Container that contains the service information such as Ground/Air.
Required if the customer provides ServiceSearch Time.
 * @typedef  {ServiceSearchServiceCode} serviceSearchServiceCode - Container that contains the service information such as Ground/Air.
Required if the customer provides ServiceSearch Time. - Container that contains the service information such as Ground/Air.
Required if the customer provides ServiceSearch Time.
 * @property {string} - Code indicating the different services. Valid values are:
01-Ground.
02-Air.
03-Express
04-Standard
05-International (Only avialable July 17)
 */
export type ServiceSearchServiceCode = z.infer<typeof serviceSearchServiceCode>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const serviceSearchServiceCodeResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string().min(2).max(2),
    })
    .transform((data) => ({
      code: data['Code'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const serviceSearchServiceCodeRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
  }));
});
