// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationIvr = z.object({
  phraseId: z.string().min(1).max(30),
  textToSpeechIndicator: z.string().optional(),
});

/**
 * Integrated Voice Response information. 
ONLY FOR IVR.
 * @typedef  {DropLocationIvr} dropLocationIvr - Integrated Voice Response information. 
ONLY FOR IVR. - Integrated Voice Response information. 
ONLY FOR IVR.
 * @property {string} - Contains the name of the IVR file that relates to this drop location. The file is an audio recording of information related to the location.
ONLY FOR IVR.
 * @property {string} - Indicates to the response recipient that the information has changed, and a new audio file should be produced. 
ONLY FOR IVR.
 */
export type DropLocationIvr = z.infer<typeof dropLocationIvr>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationIvrResponse = z
  .object({
    PhraseID: z.string().min(1).max(30),
    TextToSpeechIndicator: z.string().optional(),
  })
  .transform((data) => ({
    phraseId: data['PhraseID'],
    textToSpeechIndicator: data['TextToSpeechIndicator'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationIvrRequest = z
  .object({ phraseId: z.string().nullish(), textToSpeechIndicator: z.string().nullish() })
  .transform((data) => ({
    PhraseID: data['phraseId'],
    TextToSpeechIndicator: data['textToSpeechIndicator'],
  }));
