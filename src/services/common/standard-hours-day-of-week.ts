// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const standardHoursDayOfWeek: any = z.lazy(() => {
  return z.object({
    day: z.string().min(1).max(1),
    openHours: z.string().min(4).max(4).optional(),
    closeHours: z.string().min(4).max(4).optional(),
    latestDropOffHours: z.string().min(4).max(4).optional(),
    prepHours: z.string().min(4).max(4).optional(),
    closedIndicator: z.string().optional(),
    open24HoursIndicator: z.string().min(4).max(5).optional(),
  });
});

/**
 * 
 * @typedef  {StandardHoursDayOfWeek} standardHoursDayOfWeek   
 * @property {string} - Day of week. 
Valid values: 
1-Sunday
2-Monday
3-Tuesday
4-Wednesday
5-Thursday
6-Friday
7-Saturday.
 * @property {string} - Open time of a location in military format (HHMM) e.g. 930, 1700, 1845 etc. with exception for midnight. For midnight the time will be returned as 0.
 * @property {string} - Close time of a location in military format (HHMM) e.g. 930, 1700, 1845 etc. with exception for midnight. For midnight the time will be returned as 0.
 * @property {string} - LatestDropOffHours for Hour Type 50. Latest Drop Off time of a location in military format (HHMM) e.g. 930, 1700, 1845 etc. with exception for midnight. For midnight the time will be returned as 0.
 * @property {string} - PrepHours for Hour Type 51. Prep Hours of a location in military format (HHMM) e.g. 930, 1700, 1845 etc. with exception for midnight. For midnight the time will be returned as 0.
 * @property {string} - Presence absence Indicator. Indicator present means location is closed.
 * @property {string} - Presence/ Absence Indicator. Presence denotes  for the given day, if the location is open 24 hours. Absence denotes the location is not open for 24 hours on the given day.
 */
export type StandardHoursDayOfWeek = z.infer<typeof standardHoursDayOfWeek>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const standardHoursDayOfWeekResponse: any = z.lazy(() => {
  return z
    .object({
      Day: z.string().min(1).max(1),
      OpenHours: z.string().min(4).max(4).optional(),
      CloseHours: z.string().min(4).max(4).optional(),
      LatestDropOffHours: z.string().min(4).max(4).optional(),
      PrepHours: z.string().min(4).max(4).optional(),
      ClosedIndicator: z.string().optional(),
      Open24HoursIndicator: z.string().min(4).max(5).optional(),
    })
    .transform((data) => ({
      day: data['Day'],
      openHours: data['OpenHours'],
      closeHours: data['CloseHours'],
      latestDropOffHours: data['LatestDropOffHours'],
      prepHours: data['PrepHours'],
      closedIndicator: data['ClosedIndicator'],
      open24HoursIndicator: data['Open24HoursIndicator'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const standardHoursDayOfWeekRequest: any = z.lazy(() => {
  return z
    .object({
      day: z.string().nullish(),
      openHours: z.string().nullish(),
      closeHours: z.string().nullish(),
      latestDropOffHours: z.string().nullish(),
      prepHours: z.string().nullish(),
      closedIndicator: z.string().nullish(),
      open24HoursIndicator: z.string().nullish(),
    })
    .transform((data) => ({
      Day: data['day'],
      OpenHours: data['openHours'],
      CloseHours: data['closeHours'],
      LatestDropOffHours: data['latestDropOffHours'],
      PrepHours: data['prepHours'],
      ClosedIndicator: data['closedIndicator'],
      Open24HoursIndicator: data['open24HoursIndicator'],
    }));
});
