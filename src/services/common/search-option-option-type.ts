// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const searchOptionOptionType: any = z.lazy(() => {
  return z.object({
    code: z.string().min(2).max(2),
  });
});

/**
 * OptionType is a container that indicates the type of search for locations. There are 5 types of search. They are search by: Location, Retail Location, Additional Services, Program Type, and a Service Level Option. 
If search criteria by Location or Retail Location is not provided the default search of The UPS Store, UPS Center, UPS Drop Box, and Authorized Shipping Outlet location types will be performed.
 * @typedef  {SearchOptionOptionType} searchOptionOptionType - OptionType is a container that indicates the type of search for locations. There are 5 types of search. They are search by: Location, Retail Location, Additional Services, Program Type, and a Service Level Option. 
If search criteria by Location or Retail Location is not provided the default search of The UPS Store, UPS Center, UPS Drop Box, and Authorized Shipping Outlet location types will be performed. - OptionType is a container that indicates the type of search for locations. There are 5 types of search. They are search by: Location, Retail Location, Additional Services, Program Type, and a Service Level Option. 
If search criteria by Location or Retail Location is not provided the default search of The UPS Store, UPS Center, UPS Drop Box, and Authorized Shipping Outlet location types will be performed.
 * @property {string} - Code for Option type valid values are:

- 01-Location
- 02-Retail Location
- 03-Additional Services
- 04-Program Type
- 05-Service Level Option.
- 06-End Point Service Offering

 */
export type SearchOptionOptionType = z.infer<typeof searchOptionOptionType>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const searchOptionOptionTypeResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string().min(2).max(2),
    })
    .transform((data) => ({
      code: data['Code'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const searchOptionOptionTypeRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
  }));
});
