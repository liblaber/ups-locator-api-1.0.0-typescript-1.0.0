// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  locatorResponseResponse1,
  locatorResponseResponse1Request,
  locatorResponseResponse1Response,
} from './locator-response-response-1';
import {
  locatorResponseGeocode,
  locatorResponseGeocodeRequest,
  locatorResponseGeocodeResponse,
} from './locator-response-geocode';
import {
  locatorResponseSearchResults,
  locatorResponseSearchResultsRequest,
  locatorResponseSearchResultsResponse,
} from './locator-response-search-results';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorResponse: any = z.lazy(() => {
  return z.object({
    response: locatorResponseResponse1,
    geocode: locatorResponseGeocode.optional(),
    searchResults: locatorResponseSearchResults,
    allowAllConfidenceLevels: z.string().min(4).max(5),
  });
});

/**
 * Container for LocatorResponse.
 * @typedef  {LocatorResponse} locatorResponse - Container for LocatorResponse. - Container for LocatorResponse.
 * @property {LocatorResponseResponse1} - Container for Response.
 * @property {LocatorResponseGeocode} - Geocode is the latitude and longitude of the origin address. The Geocode is provided in the first successful response. Required to be returned when the origin address or phone number is submitted in the request.Will not be returned when the  requestoption =64
 * @property {LocatorResponseSearchResults} - Container for search results.
 * @property {string} - Confidence level.
Valid values: True or False
 */
export type LocatorResponse = z.infer<typeof locatorResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseResponse: any = z.lazy(() => {
  return z
    .object({
      Response: locatorResponseResponse1Response,
      Geocode: locatorResponseGeocodeResponse.optional(),
      SearchResults: locatorResponseSearchResultsResponse,
      AllowAllConfidenceLevels: z.string().min(4).max(5),
    })
    .transform((data) => ({
      response: data['Response'],
      geocode: data['Geocode'],
      searchResults: data['SearchResults'],
      allowAllConfidenceLevels: data['AllowAllConfidenceLevels'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseRequest: any = z.lazy(() => {
  return z
    .object({
      response: locatorResponseResponse1Request.nullish(),
      geocode: locatorResponseGeocodeRequest.nullish(),
      searchResults: locatorResponseSearchResultsRequest.nullish(),
      allowAllConfidenceLevels: z.string().nullish(),
    })
    .transform((data) => ({
      Response: data['response'],
      Geocode: data['geocode'],
      SearchResults: data['searchResults'],
      AllowAllConfidenceLevels: data['allowAllConfidenceLevels'],
    }));
});
