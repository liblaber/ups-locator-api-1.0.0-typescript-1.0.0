// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  serviceSearchServiceCode,
  serviceSearchServiceCodeRequest,
  serviceSearchServiceCodeResponse,
} from './service-search-service-code';
import {
  serviceSearchServiceOptionCode,
  serviceSearchServiceOptionCodeRequest,
  serviceSearchServiceOptionCodeResponse,
} from './service-search-service-option-code';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locationSearchCriteriaServiceSearch: any = z.lazy(() => {
  return z.object({
    time: z.string().min(4).max(6).optional(),
    serviceCode: z.array(serviceSearchServiceCode).optional(),
    serviceOptionCode: z.array(serviceSearchServiceOptionCode).optional(),
  });
});

/**
 * Allows for users to further define the search criteria. Refer to the rules specified in Service Search section.
 * @typedef  {LocationSearchCriteriaServiceSearch} locationSearchCriteriaServiceSearch - Allows for users to further define the search criteria. Refer to the rules specified in Service Search section. - Allows for users to further define the search criteria. Refer to the rules specified in Service Search section.
 * @property {string} - Scheduled Local Drop-off Time. Format: HHMM
 * @property {ServiceSearchServiceCode[]}
 * @property {ServiceSearchServiceOptionCode[]}
 */
export type LocationSearchCriteriaServiceSearch = z.infer<typeof locationSearchCriteriaServiceSearch>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locationSearchCriteriaServiceSearchResponse: any = z.lazy(() => {
  return z
    .object({
      Time: z.string().min(4).max(6).optional(),
      ServiceCode: z.array(serviceSearchServiceCodeResponse).optional(),
      ServiceOptionCode: z.array(serviceSearchServiceOptionCodeResponse).optional(),
    })
    .transform((data) => ({
      time: data['Time'],
      serviceCode: data['ServiceCode'],
      serviceOptionCode: data['ServiceOptionCode'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locationSearchCriteriaServiceSearchRequest: any = z.lazy(() => {
  return z
    .object({
      time: z.string().nullish(),
      serviceCode: z.array(serviceSearchServiceCodeRequest).nullish(),
      serviceOptionCode: z.array(serviceSearchServiceOptionCodeRequest).nullish(),
    })
    .transform((data) => ({
      Time: data['time'],
      ServiceCode: data['serviceCode'],
      ServiceOptionCode: data['serviceOptionCode'],
    }));
});
