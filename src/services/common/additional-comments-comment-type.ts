// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const additionalCommentsCommentType: any = z.lazy(() => {
  return z.object({
    code: z.string().min(2).max(2),
    text: z.string().min(1).max(255),
  });
});

/**
 *
 * @typedef  {AdditionalCommentsCommentType} additionalCommentsCommentType
 * @property {string} - Comment code is 01 for AccessPoint LCO pickup time comment.
 * @property {string} - Access point LCO pickup time comment
 */
export type AdditionalCommentsCommentType = z.infer<typeof additionalCommentsCommentType>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const additionalCommentsCommentTypeResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string().min(2).max(2),
      Text: z.string().min(1).max(255),
    })
    .transform((data) => ({
      code: data['Code'],
      text: data['Text'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const additionalCommentsCommentTypeRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish(), text: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
    Text: data['text'],
  }));
});
