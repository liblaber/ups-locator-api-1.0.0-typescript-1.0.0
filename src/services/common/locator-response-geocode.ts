// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorResponseGeocode: any = z.lazy(() => {
  return z.object({
    latitude: z.string(),
    longitude: z.string(),
  });
});

/**
 * Geocode is the latitude and longitude of the origin address. The Geocode is provided in the first successful response. Required to be returned when the origin address or phone number is submitted in the request.Will not be returned when the  requestoption =64
 * @typedef  {LocatorResponseGeocode} locatorResponseGeocode - Geocode is the latitude and longitude of the origin address. The Geocode is provided in the first successful response. Required to be returned when the origin address or phone number is submitted in the request.Will not be returned when the  requestoption =64 - Geocode is the latitude and longitude of the origin address. The Geocode is provided in the first successful response. Required to be returned when the origin address or phone number is submitted in the request.Will not be returned when the  requestoption =64
 * @property {string} - The latitude of the origin address, center point of the exchange, center point of the postal code, or center point of the city.
 * @property {string} - The longitude of the origin address, center point of the exchange, center point of the postal code, or center point of the city.
 */
export type LocatorResponseGeocode = z.infer<typeof locatorResponseGeocode>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseGeocodeResponse: any = z.lazy(() => {
  return z
    .object({
      Latitude: z.string(),
      Longitude: z.string(),
    })
    .transform((data) => ({
      latitude: data['Latitude'],
      longitude: data['Longitude'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseGeocodeRequest: any = z.lazy(() => {
  return z.object({ latitude: z.string().nullish(), longitude: z.string().nullish() }).transform((data) => ({
    Latitude: data['latitude'],
    Longitude: data['longitude'],
  }));
});
