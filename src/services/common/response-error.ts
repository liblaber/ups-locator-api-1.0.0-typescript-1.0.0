// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { errorErrorLocation, errorErrorLocationRequest, errorErrorLocationResponse } from './error-error-location';

/**
 * The shape of the model inside the application code - what the users use
 */
export const responseError = z.object({
  errorSeverity: z.string().min(1).max(15),
  errorCode: z.string().min(1).max(15),
  errorDescription: z.string().min(1).max(50).optional(),
  minimumRetrySeconds: z.string().min(1).max(5).optional(),
  errorLocation: z.array(errorErrorLocation).optional(),
  errorDigest: z.array(z.string()).optional(),
});

/**
 * If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required.
 * @typedef  {ResponseError} responseError - If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required. - If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required.
 * @property {string} - Describes the severity of the error. 
For additional information, refer to Locator Error Codes in the Appendix.
 * @property {string} - A numeric value that describes the error. Each tool defines a range of error codes. 
For additional information, refer to Locator Error Codes in the Appendix.
 * @property {string} - Describes the error code.
 * @property {string} - Number of seconds to wait until retry. 

This field is populated on special conditions of the Transient Error only, as defined by the service.

A number between 1 and 86400 (24 hours)
 * @property {ErrorErrorLocation[]} - Identifies the element in error.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 * @property {string[]} - The contents of the element in error.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 */
export type ResponseError = z.infer<typeof responseError>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const responseErrorResponse = z
  .object({
    ErrorSeverity: z.string().min(1).max(15),
    ErrorCode: z.string().min(1).max(15),
    ErrorDescription: z.string().min(1).max(50).optional(),
    MinimumRetrySeconds: z.string().min(1).max(5).optional(),
    ErrorLocation: z.array(errorErrorLocationResponse).optional(),
    ErrorDigest: z.array(z.string()).optional(),
  })
  .transform((data) => ({
    errorSeverity: data['ErrorSeverity'],
    errorCode: data['ErrorCode'],
    errorDescription: data['ErrorDescription'],
    minimumRetrySeconds: data['MinimumRetrySeconds'],
    errorLocation: data['ErrorLocation'],
    errorDigest: data['ErrorDigest'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const responseErrorRequest = z
  .object({
    errorSeverity: z.string().nullish(),
    errorCode: z.string().nullish(),
    errorDescription: z.string().nullish(),
    minimumRetrySeconds: z.string().nullish(),
    errorLocation: z.array(errorErrorLocationRequest).nullish(),
    errorDigest: z.array(z.string()).nullish(),
  })
  .transform((data) => ({
    ErrorSeverity: data['errorSeverity'],
    ErrorCode: data['errorCode'],
    ErrorDescription: data['errorDescription'],
    MinimumRetrySeconds: data['minimumRetrySeconds'],
    ErrorLocation: data['errorLocation'],
    ErrorDigest: data['errorDigest'],
  }));
