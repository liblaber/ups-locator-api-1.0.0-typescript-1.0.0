// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  additionalCommentsCommentType,
  additionalCommentsCommentTypeRequest,
  additionalCommentsCommentTypeResponse,
} from './additional-comments-comment-type';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationAdditionalComments: any = z.lazy(() => {
  return z.object({
    commentType: z.array(additionalCommentsCommentType),
  });
});

/**
 * Container for Additional Comments about Location.Text will be displayed in the Locale requested.
 * @typedef  {DropLocationAdditionalComments} dropLocationAdditionalComments - Container for Additional Comments about Location.Text will be displayed in the Locale requested. - Container for Additional Comments about Location.Text will be displayed in the Locale requested.
 * @property {AdditionalCommentsCommentType[]} - Container for CommentType Code and Text.

**NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.

 */
export type DropLocationAdditionalComments = z.infer<typeof dropLocationAdditionalComments>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationAdditionalCommentsResponse: any = z.lazy(() => {
  return z
    .object({
      CommentType: z.array(additionalCommentsCommentTypeResponse),
    })
    .transform((data) => ({
      commentType: data['CommentType'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationAdditionalCommentsRequest: any = z.lazy(() => {
  return z.object({ commentType: z.array(additionalCommentsCommentTypeRequest).nullish() }).transform((data) => ({
    CommentType: data['commentType'],
  }));
});
