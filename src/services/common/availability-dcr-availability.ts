// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  dcrAvailabilityUnavailableReason,
  dcrAvailabilityUnavailableReasonRequest,
  dcrAvailabilityUnavailableReasonResponse,
} from './dcr-availability-unavailable-reason';

/**
 * The shape of the model inside the application code - what the users use
 */
export const availabilityDcrAvailability: any = z.lazy(() => {
  return z.object({
    availableIndicator: z.string().optional(),
    unavailableReason: dcrAvailabilityUnavailableReason.optional(),
  });
});

/**
 * Holds status of DCR/DCO availability.
 * @typedef  {AvailabilityDcrAvailability} availabilityDcrAvailability - Holds status of DCR/DCO availability. - Holds status of DCR/DCO availability.
 * @property {string} - Presence or absence indicator. Presence means the location is available for DCR/DCO.
 * @property {DcrAvailabilityUnavailableReason} - Container to hold shipping unavailable reason.
 */
export type AvailabilityDcrAvailability = z.infer<typeof availabilityDcrAvailability>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const availabilityDcrAvailabilityResponse: any = z.lazy(() => {
  return z
    .object({
      AvailableIndicator: z.string().optional(),
      UnavailableReason: dcrAvailabilityUnavailableReasonResponse.optional(),
    })
    .transform((data) => ({
      availableIndicator: data['AvailableIndicator'],
      unavailableReason: data['UnavailableReason'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const availabilityDcrAvailabilityRequest: any = z.lazy(() => {
  return z
    .object({
      availableIndicator: z.string().nullish(),
      unavailableReason: dcrAvailabilityUnavailableReasonRequest.nullish(),
    })
    .transform((data) => ({
      AvailableIndicator: data['availableIndicator'],
      UnavailableReason: data['unavailableReason'],
    }));
});
