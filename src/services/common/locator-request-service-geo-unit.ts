// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequestServiceGeoUnit: any = z.lazy(() => {
  return z.object({
    serviceCode: z.string().min(3).max(3),
    geoPoliticalUnit: z.string().min(3).max(3),
  });
});

/**
 * ServiceGeoUnit Container. Required to search for the freight facility information
 * @typedef  {LocatorRequestServiceGeoUnit} locatorRequestServiceGeoUnit - ServiceGeoUnit Container. Required to search for the freight facility information - ServiceGeoUnit Container. Required to search for the freight facility information
 * @property {string} - Service Code. Required if ServiceGeoUnit Container present. 
Valid value is '096' .
 * @property {string} - GeoPoliticalUnit. Required if ServiceGeoUnit container present.
Valid value is '002' .
 */
export type LocatorRequestServiceGeoUnit = z.infer<typeof locatorRequestServiceGeoUnit>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestServiceGeoUnitResponse: any = z.lazy(() => {
  return z
    .object({
      ServiceCode: z.string().min(3).max(3),
      GeoPoliticalUnit: z.string().min(3).max(3),
    })
    .transform((data) => ({
      serviceCode: data['ServiceCode'],
      geoPoliticalUnit: data['GeoPoliticalUnit'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestServiceGeoUnitRequest: any = z.lazy(() => {
  return z.object({ serviceCode: z.string().nullish(), geoPoliticalUnit: z.string().nullish() }).transform((data) => ({
    ServiceCode: data['serviceCode'],
    GeoPoliticalUnit: data['geoPoliticalUnit'],
  }));
});
