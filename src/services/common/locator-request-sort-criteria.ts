// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorRequestSortCriteria: any = z.lazy(() => {
  return z.object({
    sortType: z.string().min(1).max(2).optional(),
  });
});

/**
 * Container for Sort Criteria
 * @typedef  {LocatorRequestSortCriteria} locatorRequestSortCriteria - Container for Sort Criteria - Container for Sort Criteria
 * @property {string} - For different sort type. Valid values:
01-Closest Location
02-Deadline for Drop-off by Air/Express
03-Deadline for Drop-off by Ground/Standard
04-Latest Close Time
05-Earliest Open Time.
 */
export type LocatorRequestSortCriteria = z.infer<typeof locatorRequestSortCriteria>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestSortCriteriaResponse: any = z.lazy(() => {
  return z
    .object({
      SortType: z.string().min(1).max(2).optional(),
    })
    .transform((data) => ({
      sortType: data['SortType'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorRequestSortCriteriaRequest: any = z.lazy(() => {
  return z.object({ sortType: z.string().nullish() }).transform((data) => ({
    SortType: data['sortType'],
  }));
});
