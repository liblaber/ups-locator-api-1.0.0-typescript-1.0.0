// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  postalCodeListPostalCode,
  postalCodeListPostalCodeRequest,
  postalCodeListPostalCodeResponse,
} from './postal-code-list-postal-code';

/**
 * The shape of the model inside the application code - what the users use
 */
export const excludeFromResultPostalCodeList = z.object({
  postalCode: z.array(postalCodeListPostalCode),
});

/**
 * Container to hold a list of postal codes to exclude from the access point address or geocode search.
 * @typedef  {ExcludeFromResultPostalCodeList} excludeFromResultPostalCodeList - Container to hold a list of postal codes to exclude from the access point address or geocode search. - Container to hold a list of postal codes to exclude from the access point address or geocode search.
 * @property {PostalCodeListPostalCode[]}
 */
export type ExcludeFromResultPostalCodeList = z.infer<typeof excludeFromResultPostalCodeList>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const excludeFromResultPostalCodeListResponse = z
  .object({
    PostalCode: z.array(postalCodeListPostalCodeResponse),
  })
  .transform((data) => ({
    postalCode: data['PostalCode'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const excludeFromResultPostalCodeListRequest = z
  .object({ postalCode: z.array(postalCodeListPostalCodeRequest).nullish() })
  .transform((data) => ({
    PostalCode: data['postalCode'],
  }));
