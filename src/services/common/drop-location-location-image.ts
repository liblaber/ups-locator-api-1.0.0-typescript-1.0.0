// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dropLocationLocationImage: any = z.lazy(() => {
  return z.object({
    secureUrl: z.string().optional(),
    nonSecureUrl: z.string().optional(),
  });
});

/**
 * Location Image container.
 * @typedef  {DropLocationLocationImage} dropLocationLocationImage - Location Image container. - Location Image container.
 * @property {string} - Secure URL for Location Image.
 * @property {string} - Non Secure URL for Location Image.
 */
export type DropLocationLocationImage = z.infer<typeof dropLocationLocationImage>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationLocationImageResponse: any = z.lazy(() => {
  return z
    .object({
      SecureURL: z.string().optional(),
      NonSecureURL: z.string().optional(),
    })
    .transform((data) => ({
      secureUrl: data['SecureURL'],
      nonSecureUrl: data['NonSecureURL'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dropLocationLocationImageRequest: any = z.lazy(() => {
  return z.object({ secureUrl: z.string().nullish(), nonSecureUrl: z.string().nullish() }).transform((data) => ({
    SecureURL: data['secureUrl'],
    NonSecureURL: data['nonSecureUrl'],
  }));
});
