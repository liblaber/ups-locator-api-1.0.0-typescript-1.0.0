// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  excludeFromResultPostalCodeList,
  excludeFromResultPostalCodeListRequest,
  excludeFromResultPostalCodeListResponse,
} from './exclude-from-result-postal-code-list';

/**
 * The shape of the model inside the application code - what the users use
 */
export const accessPointSearchExcludeFromResult = z.object({
  businessClassificationCode: z.array(z.string()).optional(),
  businessName: z.string().min(1).max(15).optional(),
  radius: z.string().min(1).max(3).optional(),
  postalCodeList: excludeFromResultPostalCodeList.optional(),
});

/**
 * This contains elements to exclude from UPS Access Point address or geocode search.
 * @typedef  {AccessPointSearchExcludeFromResult} accessPointSearchExcludeFromResult - This contains elements to exclude from UPS Access Point address or geocode search. - This contains elements to exclude from UPS Access Point address or geocode search.
 * @property {string[]} - This contains the business classification code to exclude from UPS Access Point Search by address or geocode. Multiple codes can are possible in separate elements. Please refer to Appendix D for detailed business codes.
 * @property {string} - This contains the business name to exclude from UPS Access Point Search by address or geocode. Partial names are accepted.
 * @property {string} - Public Access points within Radius (in specified Unit of Measure) of any included private access points will be excluded from the results. Valid only if at least one IncludeCriteria/MerchantAccountNumber is provided.
 * @property {ExcludeFromResultPostalCodeList} - Container to hold a list of postal codes to exclude from the access point address or geocode search.
 */
export type AccessPointSearchExcludeFromResult = z.infer<typeof accessPointSearchExcludeFromResult>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const accessPointSearchExcludeFromResultResponse = z
  .object({
    BusinessClassificationCode: z.array(z.string()).optional(),
    BusinessName: z.string().min(1).max(15).optional(),
    Radius: z.string().min(1).max(3).optional(),
    PostalCodeList: excludeFromResultPostalCodeListResponse.optional(),
  })
  .transform((data) => ({
    businessClassificationCode: data['BusinessClassificationCode'],
    businessName: data['BusinessName'],
    radius: data['Radius'],
    postalCodeList: data['PostalCodeList'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const accessPointSearchExcludeFromResultRequest = z
  .object({
    businessClassificationCode: z.array(z.string()).nullish(),
    businessName: z.string().nullish(),
    radius: z.string().nullish(),
    postalCodeList: excludeFromResultPostalCodeListRequest.nullish(),
  })
  .transform((data) => ({
    BusinessClassificationCode: data['businessClassificationCode'],
    BusinessName: data['businessName'],
    Radius: data['radius'],
    PostalCodeList: data['postalCodeList'],
  }));
