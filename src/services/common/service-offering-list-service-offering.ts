// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const serviceOfferingListServiceOffering: any = z.lazy(() => {
  return z.object({
    code: z.string().min(3).max(3),
    description: z.string().min(1).max(35),
  });
});

/**
 * 
 * @typedef  {ServiceOfferingListServiceOffering} serviceOfferingListServiceOffering   
 * @property {string} - The valid values are: 
001-Direct To Retail
002-Not In One ADL
003-Click and Collect
004-Retail to Retail
005-Pickup
006-Drop Off
007-PUDO
008-Early Pickup Delivery Time
009-Accept prepaid drop offs
010-DCO DCR intercept accepted 
011-Accepts Payments 
012-Pay At Store
013-Accepts Restricted Articles
 * @property {string} - Description of the service offering. Text will be displayed in the locale requested.
 */
export type ServiceOfferingListServiceOffering = z.infer<typeof serviceOfferingListServiceOffering>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const serviceOfferingListServiceOfferingResponse: any = z.lazy(() => {
  return z
    .object({
      Code: z.string().min(3).max(3),
      Description: z.string().min(1).max(35),
    })
    .transform((data) => ({
      code: data['Code'],
      description: data['Description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const serviceOfferingListServiceOfferingRequest: any = z.lazy(() => {
  return z.object({ code: z.string().nullish(), description: z.string().nullish() }).transform((data) => ({
    Code: data['code'],
    Description: data['description'],
  }));
});
