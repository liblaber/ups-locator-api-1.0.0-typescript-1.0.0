// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  responseTransactionReference,
  responseTransactionReferenceRequest,
  responseTransactionReferenceResponse,
} from './response-transaction-reference';
import { responseError, responseErrorRequest, responseErrorResponse } from './response-error';

/**
 * The shape of the model inside the application code - what the users use
 */
export const locatorResponseResponse1 = z.object({
  transactionReference: responseTransactionReference.optional(),
  responseStatusCode: z.string().min(1).max(1),
  responseStatusDescription: z.string().min(1).max(15).optional(),
  error: responseError.optional(),
});

/**
 * Container for Response.
 * @typedef  {LocatorResponseResponse1} locatorResponseResponse1 - Container for Response. - Container for Response.
 * @property {ResponseTransactionReference} - Container for customer provided data and the XPCI Version.
 * @property {string} - Identifies the success or failure of the interchange. 
1-Success
0-Failure
 * @property {string} - Describes the Response Status Code.
 * @property {ResponseError} - If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required.
 */
export type LocatorResponseResponse1 = z.infer<typeof locatorResponseResponse1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseResponse1Response = z
  .object({
    TransactionReference: responseTransactionReferenceResponse.optional(),
    ResponseStatusCode: z.string().min(1).max(1),
    ResponseStatusDescription: z.string().min(1).max(15).optional(),
    Error: responseErrorResponse.optional(),
  })
  .transform((data) => ({
    transactionReference: data['TransactionReference'],
    responseStatusCode: data['ResponseStatusCode'],
    responseStatusDescription: data['ResponseStatusDescription'],
    error: data['Error'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const locatorResponseResponse1Request = z
  .object({
    transactionReference: responseTransactionReferenceRequest.nullish(),
    responseStatusCode: z.string().nullish(),
    responseStatusDescription: z.string().nullish(),
    error: responseErrorRequest.nullish(),
  })
  .transform((data) => ({
    TransactionReference: data['transactionReference'],
    ResponseStatusCode: data['responseStatusCode'],
    ResponseStatusDescription: data['responseStatusDescription'],
    Error: data['error'],
  }));
