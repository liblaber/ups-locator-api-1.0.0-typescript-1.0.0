// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  includeCriteriaMerchantAccountNumberList,
  includeCriteriaMerchantAccountNumberListRequest,
  includeCriteriaMerchantAccountNumberListResponse,
} from './include-criteria-merchant-account-number-list';
import {
  includeCriteriaSearchFilter,
  includeCriteriaSearchFilterRequest,
  includeCriteriaSearchFilterResponse,
} from './include-criteria-search-filter';
import {
  includeCriteriaServiceOfferingList,
  includeCriteriaServiceOfferingListRequest,
  includeCriteriaServiceOfferingListResponse,
} from './include-criteria-service-offering-list';

/**
 * The shape of the model inside the application code - what the users use
 */
export const accessPointSearchIncludeCriteria = z.object({
  merchantAccountNumberList: includeCriteriaMerchantAccountNumberList.optional(),
  searchFilter: includeCriteriaSearchFilter.optional(),
  serviceOfferingList: includeCriteriaServiceOfferingList.optional(),
});

/**
 * This contains elements to refine (include) UPS Access point address or geocode Search.
 * @typedef  {AccessPointSearchIncludeCriteria} accessPointSearchIncludeCriteria - This contains elements to refine (include) UPS Access point address or geocode Search. - This contains elements to refine (include) UPS Access point address or geocode Search.
 * @property {IncludeCriteriaMerchantAccountNumberList} - This contains the list of Merchant Account numbers to be used for finding private network access points.
 * @property {IncludeCriteriaSearchFilter} - Container to hold one or more search criteria for UPS Access Points that allow DCR, Shipping and ClickAndCollect access. Only applicable when the UPS access point candidate list is obtained in search by address or geocode search.
 * @property {IncludeCriteriaServiceOfferingList} - Container to hold end point service offering List for UPS Access point. Applicable only when a UPS Access Point candidate list is obtained in search by address or geocode search.
 */
export type AccessPointSearchIncludeCriteria = z.infer<typeof accessPointSearchIncludeCriteria>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const accessPointSearchIncludeCriteriaResponse = z
  .object({
    MerchantAccountNumberList: includeCriteriaMerchantAccountNumberListResponse.optional(),
    SearchFilter: includeCriteriaSearchFilterResponse.optional(),
    ServiceOfferingList: includeCriteriaServiceOfferingListResponse.optional(),
  })
  .transform((data) => ({
    merchantAccountNumberList: data['MerchantAccountNumberList'],
    searchFilter: data['SearchFilter'],
    serviceOfferingList: data['ServiceOfferingList'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const accessPointSearchIncludeCriteriaRequest = z
  .object({
    merchantAccountNumberList: includeCriteriaMerchantAccountNumberListRequest.nullish(),
    searchFilter: includeCriteriaSearchFilterRequest.nullish(),
    serviceOfferingList: includeCriteriaServiceOfferingListRequest.nullish(),
  })
  .transform((data) => ({
    MerchantAccountNumberList: data['merchantAccountNumberList'],
    SearchFilter: data['searchFilter'],
    ServiceOfferingList: data['serviceOfferingList'],
  }));
